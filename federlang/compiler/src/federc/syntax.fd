##
# syntax.fd
# created by Fionn Langhans <fionn.langhans@gmail.com>
#
# This file is necessary for the syntax analysis
##

include "stdio.fd"
# Needed for LEX_* integers
# And printing errors
include "federc/lexer.fd"

namespace compiler
    namespace syntax
        ##
        # This array contains arrays, which contain integers, which 
        # are tokens. These tokens could be right after the token
        # 'index' (Just use the token keys as indecis for this array).
        ##
        global ARRAY_SYNTAX_AWAIT = append(object[0],
                                           # Symbol
                                           object from append(int32[0],
                                                LEX_KEYWORD,
                                                LEX_OPERATOR,
                                                LEX_LINE),
                                           # Keyword
                                           object from append(int32[0],
                                                LEX_SYMBOL,
                                                LEX_INTEGER,
                                                LEX_DOUBLE,
                                                LEX_STRING,
                                                LEX_CHAR),
                                           # Operator
                                           object from append(int32[0],
                                                LEX_SYMBOL,
                                                LEX_INTEGER,
                                                LEX_DOUBLE,
                                                LEX_STRING,
                                                LEX_CHAR,
                                                LEX_KEYWORD,
                                                LEX_OPERATOR,
                                                LEX_LINE),
                                           # String
                                           object from append(int32[0],
                                                LEX_OPERATOR,
                                                LEX_LINE),
                                           # Char
                                           object from append(int32[0],
                                                LEX_OPERATOR,
                                                LEX_LINE),
                                           # Integer
                                           object from append(int32[0],
                                                LEX_OPERATOR,
                                                LEX_LINE),
                                           # Double
                                           object from append(int32[0],
                                                LEX_OPERATOR,
                                                LEX_LINE),
                                           # Line
                                           object from append(int32[0],
                                                LEX_SYMBOL,
                                                LEX_KEYWORD,
                                                LEX_OPERATOR,
                                                LEX_LINE,
                                                LEX_COMMAND,
                                                LEX_BUILDIN),
                                            # Command
                                            object from append(int32[0],
                                                LEX_LINE),
                                            # Builin
                                            object from append(int32[0],
                                                LEX_LINE)
                                          )

        int32 func _nextTokenKey(int32 pos, int32[] tokenKeys)
            if (pos + 1) >= len(tokenKeys)
                return LEX_LINE
            ;

            return tokenKeys[pos + 1]
        ;

        bool func _isNextTokenKeyAllowed(int32 tokenKey, int32 tokenKeyNext,
                                         int32[] allowedTokenKeys)
            for ii = 0, ii < len(allowedTokenKeys), ii++
                if allowedTokenKeys[ii] == tokenKeyNext
                    return true
                ;
            ;

            return false
        ;

        ##
        # @param fileName
        # @param tokenKeys
        # @param tokenValues
        # @param tokenPositions
        # @return Returns true, if the syntax analysis successfully checked
        # the given tokenKeys. Returns false, if the tokenKeys were ordered
        # in a forbidden combination.
        ##
        bool func analyse(String fileName,
                     int32[] tokenKeys,
                     String[] tokenValues,
                     int32[] tokenPositions)

            line = 1
            i = 0
            errors = 0
            for i < len(tokenKeys), i++
                tokenKey = tokenKeys[i]
                tokenKeyNext = _nextTokenKey(i, tokenKeys)

                allowedTokenKeys = int32[] from ARRAY_SYNTAX_AWAIT[tokenKey]
                if !_isNextTokenKeyAllowed(tokenKey, tokenKeyNext, allowedTokenKeys)
                    
                    errors++

                    io.err.print("File=")
                    io.err.print(fileName)
                    io.err.print(", Line=")
                    io.err.println(line)

                    errPos = i + 1
                    if tokenKeyNext == LEX_LINE
                        errPos--
                    ;

                    io.err.println(constructLine(errPos, tokenKeys, tokenValues, tokenPositions))
                    for ii = 0, ii < tokenPositions[errPos], i++
                        io.print(" ")
                    ;
                    
                    io.err.println("^")
                    io.err.print("Token '")
                    io.err.print(ARRAY_LEX_NAMES[tokenKeyNext])
                    io.err.print("' was not expected after the token '")
                    io.err.print(ARRAY_LEX_NAMES[tokenKey])
                    io.err.println("'.")
                ;

                if tokenKey == LEX_LINE
                    line++
                ;
            ;

            return errors == 0
        ;

        class ErrorTrace
            int32 indexGlobal
            String errMsg
        ;

        class Instruction ErrorTrace
            bool isMain
            bool isGlobal
            int32[] tokenKeys
            String[] tokenValues

            func init
                tokenKeys = int32[0]
                tokenValues = String[0]
            ;

            func addToken(int32 tokenKey, String tokenValue)
                append(tokenKeys, tokenKey)
                append(tokenValues, tokenValue)
            ;
        ;

        global STB_TYPE_STB = 1
        global STB_TYPE_INSTRUCTION = 2

        class SyntaxTreeBranch ErrorTrace
            String operator
            ##
            # The class of the objects in 'parts'
            # are specified by STE_TYPE_STE (^= SyntaxTreeBranch)
            # and STE_TYPE_INSTRUCTION (^= Instruction) in the array
            # 'parts_types'
            ##
            object[] parts
            ##
            # Should be STE_TYPE_STE or
            # STE_TYPE_INSTRUCTION
            ##
            int32[] parts_types

            func init
                parts = object[0]
                parts_types = int32[0]
            ;

            SyntaxTreeBranch func addInstruction(Instruction instruction)
                append(parts, object from instruction)
                append(parts_types, STB_TYPE_INSTRUCTION)
                return this
            ;

            SyntaxTreeBranch func addBranch(SyntaxTreeBranch branch)
                append(parts, object from branch)
                append(parts_types, STB_TYPE_STB)
                return this
            ;
        ;

        class PrecedenceConfig
            # The operator
            String[] keys
            # The precedence
            int32[] values

            func set(String operator, int32 precedence)
                for i = 0, i < len(keys), i++
                    if isEqual(keys[i], operator)
                        values[i] = precedence
                        return
                    ;
                ;

                append(keys, operator)
                append(values, precedence)
            ;

            func init
                keys = String[0]
                values = int32[0]

                set("class", 0)
                set("func", 0)
                set("interface", 0)
                set("else", 0)
                set("for", 0)
                set("if", 0)
                set("=", 1)
                set(":=", 1)
                set(",", 2)

                set(".", 100)
            ;

            ##
            # If 'operator' was not found: 
            #   0 is returned
            # 
            # If 'token' is not an operator or a keyword
            #   10 is returned
            ##
            int32 func getPresedence(int32 token, String operator)
                if token != LEX_OPERATOR && token != LEX_KEYWORD
                    # A small precedence
                    return 10
                ;

                for i = 0, i < len(keys), i++
                    if isEqual(keys[i], operator)
                        return values[i]
                    ;
                ;

                # The smallest precedence
                return 0
             ;
        ;

        global precedences = PrecedenceConfig

        ##
        # As the name says ... puts as much as possible in the returned
        # instruction. 'indexGlobal' will be set to the give value of
        # 'tokenStart'.
        #
        # Note: 'As much as possible' means: till the next operator
        # (and not braces)
        ##
        int32 func _asMuchAsPossible(SyntaxTreeBranch result,
                                          int32[] tokenKeys,
                                          String[] tokenValues,
                                          int32[] tokenPositions,
                                          int32 indexStart,
                                          int32 indexEnd)
        ;

        ##
        # Operator-precedence parser
        # @param lhs
        # @param tokenKeys
        # @param tokenValues
        # @param tokenPositions
        # @param indexStart
        # @param indexEnd
        # @param min_precedence
        ##
        SyntaxTreeBranch func _createParseTreeSub(SyntaxTreeBranch lhs,
                                                  int32[] tokenKeys,
                                                  String[] tokenValues,
                                                  int32[] tokenPositions,
                                                  int32 indexStart,
                                                  int32 indexEnd,
                                                  int32 min_precedence)

            if indexStart >= indexEnd
                return lhs
            ;

            int32 precedence = precedences.getPresedence(tokenKeys[indexStart],
                                                         tokenValues[indexStart])
            String operator = tokenValues[indexStart]
            
            while precedence >= min_precedence && indexStart < indexEnd
                int32 op = precedence
                # Next token, current is an operator
                indexStart++
                SyntaxTreeBranch rhs = SyntaxTreeBranch
                lastIndex = _asMuchAsPossible(rhs, tokenKeys, tokenValues,
                                              tokenPositions,
                                              indexStart, indexEnd)
                if lastIndex >= 0
                    indexStart = lastIndex + 1
                ;

                if indexStart < indexEnd
                    precedence = precedences.getPresedence(tokenKeys[indexStart],
                        tokenValues[indexStart])
                ;

                while indexStart < len(tokenKeys) && indexStart <= indexEnd && precedence >= op
                    SyntaxTreeBranch newrhs = null
                    if len(rhs.parts) == 1
                        newrhs = rhs
                    else
                        newrhs = SyntaxTreeBranch
                    ;

                    newrhs.operator = tokenValues[indexStart]

                    lastIndex = _asMuchAsPossible(rhs,
                        tokenKeys, tokenValues, tokenPositions,
                        indexStart + 1, indexEnd)
                    indexStart = lastIndex + 1

                    if newrhs != rhs
                        newrhs.addBranch(rhs)
                        rhs = newrhs
                    ;

                    precedence = precedences.getPresedence(tokenKeys[indexStart],
                                                           tokenValues[indexStart])
                ;

                lhs = SyntaxTreeBranch.addBranch(lhs)
                lhs.operator = operator
                lhs.addBranch(rhs)
            ;

            return lhs
        ;

        ##
        # Operator-precendence parser
        # @param tokenKeys len(tokenKeys) == len(tokenValues)
        # @param tokenValues len(tokenKeys) == len(tokenValues)
        # @param tokenPositions len(tokenKeys) == len(tokenPositions)
        # @param indexStart 0 <= indexStart < len(tokenKeys)
        # && indexStart <= indexEnd
        # @param indexEnd 0 <= indexEnd < len(tokenKey)
        # && indexStart <= indexEnd
        ##
        SyntaxTreeBranch func _createParseTree(int32[] tokenKeys,
                                               String[] tokenValues,
                                               int32[] tokenPositions,
                                               int32 indexStart,
                                               int32 indexEnd)
            SyntaxTreeBranch lhs = SyntaxTreeBranch
            lastIndex = _asMuchAsPossible(lhs, tokenKeys, tokenValues,
                                                tokenPositions,
                                                indexStart, indexEnd)
            if lastIndex == indexEnd
                return lhs
            ;

            SyntaxTreeBranch stb = SyntaxTreeBranch
            if lastIndex >= 0
                lastIndex++
                stb.addBranch(lhs)
            else
                lastIndex = indexStart
            ;

            return _createParseTreeSub(stb, tokenKeys, tokenValues, tokenPositions,
                                    lastIndex, indexEnd, 0)
        ;

        int32 func _asMuchAsPossible(SyntaxTreeBranch result,
                                     int32[] tokenKeys,
                                     String[] tokenValues,
                                     int32[] tokenPositions,
                                     int32 indexStart,
                                     int32 indexEnd)

            scopeCurly = 0
            scopeSquare = 0
            
            Instruction current = Instruction
            int32 indexStartBracket = 0
            i = indexStart
            for i <= indexEnd && i < len(tokenKeys), i++
                if tokenKeys[i] == LEX_OPERATOR && isEqual(tokenValues[i], "(")
                    scopeCurly++

                    if scopeCurly == 1 && scopeSquare == 0
                        result.addInstruction(current)
                        current = Instruction
                        indexStartBracket = i
                    ;
                else if tokenKeys[i] == LEX_OPERATOR && isEqual(tokenValues[i], "[")
                    scopeSquare++

                    if scopeSquare == 1 && scopeCurly == 0
                        result.addInstruction(current)
                        current = Instruction
                        indexStartBracket = i
                    ;
                else if tokenKeys[i] == LEX_OPERATOR && isEqual(tokenValues[i], ")")
                    scopeCurly--

                    if scopeCurly == 0 && scopeSquare == 0
                        result.addBranch(_createParseTree(tokenKeys,
                                                          tokenValues,
                                                          tokenPositions,
                                                          indexStartBracket + 1,
                                                          i - 1))
                    ;
                else if tokenKeys[i] == LEX_OPERATOR && isEqual(tokenValues[i], "]")
                    scopeSquare--

                    if scopeSquare == 0 && scopeCurly == 0
                        result.addBranch(_createParseTree(tokenKeys,
                                                          tokenValues,
                                                          tokenPositions,
                                                          indexStartBracket + 1,
                                                          i - 1))
                    ;
                else if ((scopeCurly == 0 && scopeSquare == 0)
                    && (tokenKeys[i] == LEX_OPERATOR
                        || tokenKeys[i] == LEX_KEYWORD))

                    break
                ;

                if scopeCurly == 0 && scopeSquare == 0
                    current.addToken(tokenKeys[i], tokenValues[i])
                ;
            ;

            if len(current.tokenKeys) > 0
                result.addInstruction(current)
            ;

            if len(result.parts) == 0
                return -1
            ;

            result.indexGlobal = indexStart
            return i
        ;

        ##
        # @param fileName
        # @param tokenKeys
        # @param tokenValues
        # @param tokenPositions
        # @param indexStart
        # @param indexEnd
        # @return Returns a master branch, containing several branches,
        # which were found in the selected tokens (creates branch per line
        # which then create more branches with an operator-precedence parser
        ##
        SyntaxTreeBranch func createBranches(String fileName,
                                               int32[] tokenKeys,
                                               String[] tokenValues,
                                               int32[] tokenPositions,
                                               int32 indexStart,
                                               int32 indexEnd)
            
            SyntaxTreeBranch master = SyntaxTreeBranch
            startBranch = indexStart
            #iLine = 0
            for i = indexStart, i <= indexEnd, i++
                if i == indexEnd || tokenKeys[i] == LEX_LINE
                    #iLine++
                    #io.print("Current Line:")
                    #io.println(iLine)

                    # The last index
                    endBranch = i - 1

                    # End of the syntax unit
                    SyntaxTreeBranch result = _createParseTree(tokenKeys,
                                                               tokenValues,
                                                               tokenPositions,
                                                               startBranch,
                                                               endBranch)
                    # Check if the branch is empty, if not add to master
                    if len(result.parts) > 0
                        master.addBranch(result)
                    ;

                    # Set startBranch to the beginning of the next line
                    startBranch = i + 1 # Current i is a line (or end)
                                        # so the next token is the next line
                ;
            ;
        ;
    ;
;
