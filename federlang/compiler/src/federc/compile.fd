##
# compile.fd
# created by Fionn Langhans <fionn.langhans@gmail.com>
##
include "stdio.fd"
include "federc/help.fd"
include "federc/lexer.fd"
include "federc/syntax.fd"
include "federc/parser.fd"

namespace compiler
    namespace compile
        ##  
        # This function was written for the function below:
        # command(args). It reads a files (path given: files[i])
        # and adds the result to TokenKeys, TokenValues, TokenPositions
        ##
        bool func _readFile(String[] files, int32 i,
                            int32[] TokenKeys,
                            String[] TokenValues,
                            int32[] TokenPositions)

            Lex = compiler.lexer.LexerHelper
            Lex.name = files[i]

            if isEqual(files[i], "-")
                String buffer = String
                byte c = io.readByte()
                io.println("Reading from stdin")
                while c != '\0'
                    buffer.addto(Byte.set(c))
                    c = io.readByte()
                ;

                Lex.buffer = object from StringReader.new(buffer)
                Lex.fn_buffer_readbyte = compiler.lexer.readbyteString
            else 
                File f = File
                if !f.open(files[i], "r")
                    io.err.print("Can't read file ")
                    io.err.println(files[i])
                    return false
                ;

                Lex.buffer = object from f
                Lex.fn_buffer_readbyte = compiler.lexer.readbyteFile
                Lex.fn_buffer_close = compiler.lexer.closeFile
            ;

            if !compiler.lexer.lex(Lex,
                    TokenKeys, TokenValues, TokenPositions)
                # No notice for now
                # if you think it is neccessary email me
                return false
            ;   

            return true
        ; 

        ##
        # @param args Should start with the compile command (like 'compile')
        ##
        bool func command(String[] args)
            if len(args) == 1
                compiler.help.err(args[0])
                return false
            ;

            # For analysing the arguments of the command
            int32 flag = 0
            FLAG_FILENAME = 0
            FLAG_OUTPUT_DIR = 1

            # options
            Files = String[0]
            String buildDir = "./build"

            for i = 1, i < len(args), i ++
                if isEqual(flag, FLAG_FILENAME) && args[i].startsWith("-")
                    if isEqual(args[i], "-output-dir") || isEqual(args[i], "-d")
                        flag = FLAG_OUTPUT_DIR
                    else
                        compiler.help.err_unknown_option(args[0], args[i])
                    ;
                else if flag != FLAG_FILENAME
                    if isEqual(flag, FLAG_OUTPUT_DIR)
                        buildDir = args[i]
                    ;

                    flag = FLAG_FILENAME
                else
                    String addtofiles = args[i]
                    if addtofiles.startsWith("\\-")
                        # Because options start always with '-', files
                        # starting with '-' have to be called with a \
                        # (backslash) in front of the filename
                        addtofiles = addtofiles.cp().removeAt(0)
                    ;

                    append(Files, addtofiles)
                ;
            ;

            if len(Files) == 0
                compiler.help.err(args[0])
                return false
            ;

            # error count
            int32 errors = 0
            syntax.SyntaxTreeBranch[] masters = syntax.SyntaxTreeBranch[0]

            # Start the lexer
            for i = 0, i < len(Files), i++
                TokenKeys = int32[0]
                TokenValues = String[0]
                TokenPositions = int32[0]
                if !_readFile(Files, i,
                              TokenKeys,
                              TokenValues,
                              TokenPositions)
                    errors++
                    append(masters, null)
                    continue
                ;

                master = syntax.createBranches(Files[i],
                    TokenKeys, TokenValues, TokenPositions,
                    0, len(TokenKeys) - 1)

                if master == null
                    continue
                ;

                # Simplify
                syntax.simplify(master)

                io.print("Parts_len: ")
                io.println(len(master.parts))
            ;
        ;
    ;
;
