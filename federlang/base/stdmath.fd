##
# stdmath.fd
# created by Fionn Langhans <fionn.langhans@gmail.com>
##

include "stdc.fd"
include "stdtype.fd"

namespace h_intern_stdmath
    :#include <math.h>
;

# Tell the C compiler to use the math library
::use -lm

namespace math
    # C Binding
    ::rule buildin func_sqrt "sqrt({0})" double
    ::rule buildin func_pow "pow({0})" double

    ::rule buildin func_floor "floor({0})" double
    ::rule buildin func_ceil "ceil({0})" double
    ::rule buildin func_abs "abs({0})" double

    ::rule buildin func_fmax "fmax({0})" double
    ::rule buildin func_fmin "fmin({0})" double

    ::rule buildin func_cos "cos({0})" double
    ::rule buildin func_sin "sin({0})" double
    ::rule buildin func_tan "tan({0})" double
    ::rule buildin func_acos "acos({0})" double
    ::rule buildin func_asin "asin({0})" double
    ::rule buildin func_atan "atan({0})" double
    ::rule buildin func_cosh "cosh({0})" double
    ::rule buildin func_sinh "sinh({0})" double
    ::rule buildin func_tanh "tanh({0})" double
    
    # Constants
    global double PI = 3.14159265358979323846 # PI
    global double PI2 = 1.57079632679489661923 # PI / 2
    global double SQRT2 = 1.41421356237309504880 # sqrt(2)

    double func pow(double base, double exponent)
        return pow!(base, exponent)
    ;

    double func abs(double n)
        return abs!(n)
    ;

    double func max(double n0, double n1)
        return fmax!(n0, n1)
    ;

    double func min(double n0, double n1)
        return fmin!(n0, n1)
    ;

    double func cos(double n)
        return cos!(n)
    ;

    double func sin(double n)
        return sin!(n)
    ;

    double func tan(double n)
        return tan!(n)
    ;

    double func sqrt(double n)
        double result = sqrt!(n)
        #:federobj_result = sqrt (federobj_n);
        return result
    ;

    int64 func sqrt (int64 n)
        int64 result = int64 from sqrt!(double from n)
        return result
    ;

    uint64 func sqrt (uint64 n)
        uint64 result = uint64 from sqrt!(uint64 from n)
        return result
    ;

    int32 func sqrt (int32 n)
        int32 result = int32 from sqrt!(double from n)
        return result
    ;

    uint32 func sqrt (uint32 n)
        uint32 result = uint32 from sqrt!(double from n)
        return result
    ;

    double func floor (double n)
        double result = floor!(n)
        return result
    ;

    double func ceil (double n)
        double result = ceil!(n)
        return result
    ;

    class Vector2i32
        int32 x0
        int32 x1
        
        Vector2i32 func new (int32 ax0, int32 ax1)
            x0 = ax0
            x1 = ax1
            return this
        ;

        int32 func lengthSqrt
            return (x0 * x0) + (x1 * x1)
        ;

        double func length
            return math.sqrt (double from lengthSqrt ())
        ;

        Vector2i32 func add (Vector2i32 v0)
            x0 += v0.x0
            x1 += v0.x1
        ;
        
        int32 func scalar (Vector2i32 v0)
            return x0 * v0.x0 + x1 * v0.x1
        ;
    ;
;
