##
# types/byte.fd
# created by Fionn Langhans <fionn.langhans@gmail.com>
#
# This file is part of the Feder Standard Library and
# provides a byte like type
##

include "stdc.fd"
include "types/bool.fd"

namespace h_intern_bool_include
	:#include <ctype.h>
;

type "signed char" byte
	bool func isDigit
		:return (fdc_bool) isdigit (*federobj_this);
	;

	byte func upper
		:return toupper (*federobj_this);
	;

	byte func lower
		:return tolower (*federobj_this);
	;
;

::rule pattern == "{0} == {1}" bool byte byte
::rule pattern != "{0} != {1}" bool byte byte

type "unsigned char" ubyte
;

namespace h_intern_byte
	:fdtypearray*
	:fdAppendToTypeArray_fdc_byte (fdtypearray* ar, signed char n);
;

namespace c_intern_byte
	:fdtypearray*
	:fdAppendToTypeArray_fdc_byte (fdtypearray* ar, signed char n) {
		:return fdAppendToTypeArray (ar, (char*) &n);
	:}
;

class Byte
	byte val

	Byte func set (Byte b)
		this.val = b.val
		return this
	;

	Byte func set (byte b)
		this.val = b
		return this
	;

	Byte func cp
		return Byte.set (this)
	;

	bool func isDigit
		return val.isDigit ()
	;

	func toUpper
		val = val.upper ()
	;

	func toLower
		val = val.lower ()
	;
;

namespace h_intern_Bool
	:fdc_Byte *
	:fdCreateByte (signed char c);
;

namespace c_intern_Bool
	:fdc_Byte *
	:fdCreateByte (signed char c) {
		:fdc_Byte* result = fdCreateClass_fdc_Byte ();
		:result->federobj_val = c;
		:return result;
	:}
;

::rule pattern ! "!{1}" bool null bool
